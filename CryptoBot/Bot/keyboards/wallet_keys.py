from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from Bot.keyboards.base_keys import rep_back_button
from Bot.utilts.currency_helper import base_tokens
from Dao.models.Token import Token


def main_wallet_keys():
    mark = InlineKeyboardBuilder()
    mark.row((InlineKeyboardButton(text=f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="replenish")))
    mark.row((InlineKeyboardButton(text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")))
    mark.row((InlineKeyboardButton(text=f"–û–±–º–µ–Ω—è—Ç—å", callback_data="exchange")))
    mark.row((InlineKeyboardButton(text=f"–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="full_history")))
    # mark.row((InlineKeyboardButton(text=f"–û–±–Ω–æ–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="refresh_wallet_edit")))
    mark.adjust(2, 1, 1)
    return mark.as_markup(resize_keyboard=True)

def add_token_kb(custom_token_list: list | None = None):
    mark = InlineKeyboardBuilder()
    t_list = custom_token_list if custom_token_list else base_tokens.keys()
    for token in t_list:
        mark.row((InlineKeyboardButton(text=f"üîò {token}", callback_data=f"new_t_{token}")))
    mark.adjust(2)
    mark.row((InlineKeyboardButton(text=f"‚ÜñÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_wall")))
    return mark.as_markup(resize_keyboard=True)


def delete_token_kb(token_list: list):
    mark = InlineKeyboardBuilder()
    for token in token_list:
        mark.row((InlineKeyboardButton(text=f"üîò {token}", callback_data=f"del_t_{token}")))
    mark.adjust(2)
    mark.row((InlineKeyboardButton(text=f"‚ÜñÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_wall")))
    return mark.as_markup(resize_keyboard=True)


def inspect_token_kb(token_list: list[Token]):
    mark = InlineKeyboardBuilder()
    for token in token_list:
        mark.row((InlineKeyboardButton(text=f"üîò {str(token)}", callback_data=f"inspect_t_{token}")))
    mark.adjust(2)
    mark.row((InlineKeyboardButton(text=f"‚ÜñÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_wall")))
    return mark.as_markup(resize_keyboard=True)


def network_kb(token: str, custom_network_list: list | None = None):
    mark = InlineKeyboardBuilder()
    n_list = custom_network_list if custom_network_list else base_tokens.get(token).get("network")
    for network in n_list:
        mark.row((InlineKeyboardButton(text=f"üìü {network}", callback_data=f"new_n_{network}")))
    mark.adjust(2)
    mark.row((InlineKeyboardButton(text=f"‚ÜñÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="back")))
    return mark.as_markup(resize_keyboard=True)


def addresses_kb(counter: int):
    mark = InlineKeyboardBuilder()
    for i in range(1, counter):
        mark.row((InlineKeyboardButton(text=str(i), callback_data=str(i))))
    mark.adjust(2)
    mark.row((InlineKeyboardButton(text=f"–°–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–æ—à–µ–ª–µ–∫", callback_data="new_address")))
    mark.row((InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data="back")))
    return mark.as_markup(resize_keyboard=True)


def refresh_button():
    mark = InlineKeyboardBuilder()
    mark.row((InlineKeyboardButton(text=f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="refresh_wallet_keep")))
    return mark.as_markup(resize_keyboard=True)


def wallet_view_kb():
    mark = InlineKeyboardBuilder()
    mark.row((InlineKeyboardButton(text=f"–ú–æ–∏ –∞–¥—Ä–µ—Å–∞", callback_data="my_adresses")))
    mark.row((InlineKeyboardButton(text=f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π", callback_data="wallet_history")))
    mark.row((InlineKeyboardButton(text=f"< –ù–∞–∑–∞–¥", callback_data="back")))
    mark.row((InlineKeyboardButton(text=f"<<< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="refresh_wallet")))
    return mark.as_markup(resize_keyboard=True)


def confirm_delete_kb():
    mark = InlineKeyboardBuilder()
    mark.add((InlineKeyboardButton(text=f"‚≠ïÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_wall")))
    mark.add((InlineKeyboardButton(text=f"‚ôªÔ∏è –î—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω", callback_data="back")))
    mark.row((InlineKeyboardButton(text=f"üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="—Åonfirm_delete")))
    return mark.as_markup(resize_keyboard=True)


def currency_kb():
    mark = InlineKeyboardBuilder()
    for currency in base_tokens:
        chain = base_tokens[currency]
        mark.row((InlineKeyboardButton(text=f"üîò {currency} [{chain}]",
                                       callback_data=chain)))
    return mark.as_markup(resize_keyboard=True)


@rep_back_button
def AML_menu():
    mark = ReplyKeyboardBuilder()
    return mark.as_markup(resize_keyboard=True)


def send_money_kb(token_list: list[str]):
    mark = InlineKeyboardBuilder()
    for token in token_list:
        mark.row((InlineKeyboardButton(text=f"{token}", callback_data=token)))
    return mark.as_markup(resize_keyboard=True)


def trans_history_start():
    mark = InlineKeyboardBuilder()
    mark.row((InlineKeyboardButton(text=f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", callback_data="replenish_history")))
    mark.row((InlineKeyboardButton(text=f"–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫", callback_data="send_history")))
    mark.row((InlineKeyboardButton(text=f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ UID", callback_data="UID_history")))
    mark.row((InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data="refresh_wallet")))
    return mark.as_markup(resize_keyboard=True)

