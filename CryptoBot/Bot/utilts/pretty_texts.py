from aiogram.types import User

from Bot.utilts.currency_helper import base_tokens, blockchains
from Dao.DB_Redis import DataRedis
from Dao.models.Address import Address
from Dao.models.Wallet import Wallet
from Services.AddressService import AddressService
from Services.owner_service import OwnerService
from Services.TokenService import TokenService


async def all_wallets_text(user_id: int):
    u_id = await DataRedis.find_user(user_id)
    user_tokens = await OwnerService.get_tokens(u_id)
    text = f'UID: <code>{u_id}</code> üë§\n'
    text += f'<b>–ö–æ—à–µ–ª–µ–∫:</b>\n\n'
    if user_tokens:
        user_wallets = await OwnerService.get_wallets(u_id)
        text = f'<b>–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{u_id}</code></b>\n'
        text += '<b>–ë–∞–ª–∞–Ω—Å—ã:\n</b>'
        text += "<code>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</code>\n"

        for blockchain in user_wallets:
            addressess = user_wallets[blockchain].addresses
            for address in addressess:
                adress_obj = addressess.get(address)
                balances = await AddressService.get_balances(address=address)
                for token in adress_obj.tokens:
                    balance = balances.get(token.token_name, 'Iternal Error!')
                    text += f"{token.token_name}: {balance}\n"

            text += "<code>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</code>\n"
            text += '<i>‚ñ´Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –Ω—É–∂–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ "–î–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥"</i>'
    else:
        text += '<i>‚ñ´Ô∏è –í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω.</i>'
    return text


async def detail_view_text(user_id: int, token_name: str, token_network: str):
    token_and_address = await TokenService.find_address_token(token_name=token_name,
                                                              token_network=token_network,
                                                              user_id=user_id)
    token = token_and_address.get('token')
    address = token_and_address.get('address')
    balance = (await AddressService.get_balances(address=address.address, specific=[token]))[token.token_name]
    transactions = [str(transaction) for transaction in address.transactions]

    text = f"<b>–¢–æ–∫–µ–Ω: {token.token_name}\n–°–µ—Ç—å: {token.network}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}</b>\n\n"
    text += f"<b>–ü—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å:</b> <code>{address.address}</code>\n"
    text += f"<i>- - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - -</i>\n\n"
    text += f"<b>–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n"
    if transactions:
        for trsc in transactions:
            text += f" - {trsc}"
    else:
        text += f"<i>- - –°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç - -</i>"
    return text
