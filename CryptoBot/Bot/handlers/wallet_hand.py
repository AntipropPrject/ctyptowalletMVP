from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from sqlalchemy.ext.asyncio import AsyncSession

from Bot.filters.wallet_filters import ChainOwned
from Bot.keyboards.wallet_keys import create_wallet_kb, currency_kb, use_wallet_kb, send_money_kb, send_money_confirm_kb
from Bot.states.main_states import MainState
from Bot.states.wallet_states import WalletStates, WalletSendMoney
from Bot.utilts.cleaner import Cleaner
from Bot.utilts.currency_helper import currencies
from Bot.utilts.pretty_texts import pretty_balance
from Databases.DB_Postgres.models import Owner, Wallet

router = Router()
router.message.filter(StateFilter(MainState.welcome_state, WalletStates, WalletSendMoney))


@router.message(F.text == "üíπ –ö–æ—à–µ–ª—å–∫–∏", StateFilter(MainState.welcome_state))
async def choose_currency(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏:',
                         reply_markup=currency_kb())


@router.callback_query(ChainOwned(), (F.data.in_(set(currencies.values()))))
async def use_wallet(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.answer()
    await state.set_state(WalletStates.use_wallet)
    owner: Owner = await Owner.get(session, callback.from_user)

    wallet: Wallet = owner.wallets.get(callback.data)
    if wallet:
        msg = await callback.message.answer(f'–í—ã –≤–ª–∞–¥–µ–µ—Ç–µ –∫–æ—à–µ–ª—å–∫–æ–º –≤ —Å–µ—Ç–∏ <b>{callback.data}</b>.\n\n'
                                            f'–ü—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å:\n <code>{wallet.wallet_address}</code>',
                                            reply_markup=use_wallet_kb())
        await state.update_data(wallet_chain=wallet.blockchain, wallet_message=msg.message_id)
        await Cleaner.store(state, msg.message_id)
    else:
        await do_you_want_it(callback, state)


@router.callback_query(~ChainOwned(), (F.data.in_(set(currencies.values()))))
async def do_you_want_it(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(WalletStates.create_wallet)
    msg = await callback.message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ <b>{callback.data}</b>. –•–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Å—Ç–∏?\n\n',
                                        reply_markup=create_wallet_kb(callback.data))
    await Cleaner.store(state, msg.message_id)


@router.message(F.text.startswith("ü™ô –û—Ç–∫—Ä—ã—Ç—å –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏"), StateFilter(WalletStates.create_wallet))
async def choose_currency(message: Message, state: FSMContext, session: AsyncSession):
    try:
        owner: Owner = await session.get(Owner, message.from_user.id)
        wallet = await owner.createWallet(blockchain="tron", session=session)
    except Exception as ex:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {ex}, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.', reply_markup=ReplyKeyboardRemove())
        return
    else:
        await state.set_state(WalletStates.use_wallet)
        msg = await message.answer(f'–°–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫:\n\n–ü—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å:\n <code>{str(wallet.wallet_address)}</code>',
                                   reply_markup=use_wallet_kb())
        await Cleaner.store(state, msg.message_id)


@router.message(F.text == "üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ üí∏", StateFilter(WalletStates.use_wallet, WalletSendMoney))
async def send_money_start(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    await Cleaner.store(state, message.message_id)
    data = await state.get_data()
    chain = data.get('wallet_chain')
    owner: Owner = await session.get(Owner, message.from_user.id)
    wallet: Wallet = owner.wallets.get(chain)
    await state.set_state(WalletSendMoney.send_money_start)
    text = pretty_balance(await wallet.getBalance()) + "\n–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?"
    msg = await message.answer(text, reply_markup=send_money_kb([token.upper() for token in await wallet.getBalance()]))
    await state.update_data(msg_sender=msg.message_id, send_text=text)


@router.callback_query(StateFilter(WalletSendMoney.send_money_start))
async def send_money_where(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.answer()
    await state.set_state(WalletSendMoney.send_money_where)
    old_text = callback.message.text.replace("   \n–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", "")
    text = old_text + f"\n–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: <code>{callback.data}</code>\n" + "\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å:"
    await bot.edit_message_text(text,
                                callback.message.chat.id,
                                callback.message.message_id,
                                reply_markup=None)
    await state.update_data(send_text=text)


@router.message(StateFilter(WalletSendMoney.send_money_where))
async def send_money_how_many(message: Message, bot: Bot, state: FSMContext):
    await Cleaner.store(state, message.message_id)
    await state.set_state(WalletSendMoney.send_money_how_many)
    data = await state.get_data()
    await state.update_data(target_adress=message.text)
    old_text = data.get('send_text').replace("\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å:", "")
    text = old_text + f"–ù–∞ –∞–¥—Ä–µ—Å: <code>{message.text}</code>\n" + '\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?'
    await state.update_data(send_text=text)
    await bot.edit_message_text(text,
                                message.chat.id,
                                data.get("msg_sender"),
                                reply_markup=None)


@router.message(StateFilter(WalletSendMoney.send_money_how_many))
async def send_money_confirm(message: Message, bot: Bot, state: FSMContext):

    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        return

    await Cleaner.store(state, message.message_id)
    await state.set_state(WalletSendMoney.send_money_confirm)
    data = await state.get_data()
    old_text = data.get('send_text').replace('\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?', "")
    text = old_text + f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{amount}</code>\n" + "\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –¥–≤–∞–∂–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:"
    await state.update_data(amount=amount, send_text=text)
    await bot.edit_message_text(text, message.chat.id, data.get("msg_sender"),
                                reply_markup=send_money_confirm_kb(confirm_push=0))


@router.callback_query(F.data == 'more_conf', StateFilter(WalletSendMoney.send_money_confirm))
async def send_money_confirm_pushs(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    conf_push = data.get("confirm_push", 0)
    conf_push += 1
    await state.update_data(confirm_push=conf_push)
    await bot.edit_message_reply_markup(callback.message.chat.id, data.get("msg_sender"),
                                        reply_markup=send_money_confirm_kb(confirm_push=conf_push))


@router.callback_query(F.data == 'send_confirmed', StateFilter(WalletSendMoney.send_money_confirm))
async def send_money_really_end(callback: CallbackQuery, session: AsyncSession, bot: Bot, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    await bot.edit_message_reply_markup(callback.message.chat.id, data.get("msg_sender"),
                                        reply_markup=send_money_confirm_kb(confirm_push=2))
    try:
        owner: Owner = await session.get(Owner, callback.from_user.id)
        chain = data.get('wallet_chain')
        target_adress = (await state.get_data()).get('target_adress')
        amount = data.get('amount')
        wallet = owner.wallets.get(chain)
        text = await wallet.createTransaction(session, target_adress, float(amount))
        result_for_keyboard = 3
    except Exception as ex:
        text = str(ex)
        result_for_keyboard = 66
    await bot.edit_message_reply_markup(callback.message.chat.id, data.get("msg_sender"),
                                        reply_markup=send_money_confirm_kb(confirm_push=result_for_keyboard))
    await callback.message.answer(text)
    await state.set_state(WalletStates.use_wallet)
    await Cleaner.clean(state, bot, callback.message.chat.id)
