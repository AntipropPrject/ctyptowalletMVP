import asyncio

from aiogram import Router, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from Bot.filters.auth_filter import NotAuthFilter
from Bot.handlers.m_menu_hand import main_menu
from Bot.states.main_states import AuthState
from Bot.utilts.mmanager import MManager
from Databases.DB_Postgres.models import Owner
from Databases.DB_Redis import RedRedis, DataRedis

router = Router()
router.message.filter(NotAuthFilter())


@router.message(~StateFilter(AuthState))
@router.callback_query(~StateFilter(AuthState))
@MManager.garbage_manage()
async def you_need_tb_authenticated(event: Message | CallbackQuery, state: FSMContext):
    await state.set_state(AuthState.need_auth)
    message = event if isinstance(event, Message) else event.message
    msg = await message.answer("<i>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.\n"
                               "–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–º—É —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.</i>")
    await MManager.garbage_store(state, msg.message_id)



@router.message(StateFilter(AuthState))
async def password_checking(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    await bot.delete_message(message.chat.id, message.message_id)
    pass_right = await Owner.password_check(session=session, user=message.from_user, text=message.text)
    if pass_right:
        await DataRedis.authorize(message.from_user.id)
        msg = await message.answer("<code>|üü¢|üü¢|üü¢|</code> –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        await asyncio.sleep(0.5)
        await main_menu(message, state, bot)
    else:
        msg = await message.answer("<code>|üî¥|üî¥|üî¥|</code> –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await MManager.garbage_store(state, msg.message_id)
